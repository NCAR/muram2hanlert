!#####################################################################
!#####################################################################
!
! HanleRT input file
! This file sets the conditions to solve the problem. It works throuh
! keywords. You can order them however you want, only two of them are 
! required (the rest have defaults).
!
! '!' symbols are considered comments (at any position in a line).
!
!#####################################################################
!#####################################################################

!#####################################################################
!
! ATOM
!
! ATOM_INPUT (REQUIRED): String URL
!   File with the atomic data. Several entries with the same keyword
!   are additive, that is, the NLTE problem will be solved for all the
!   atoms with keyword. The path to a population file (they are
!   generated by the code in every run) can be specified to set them
!   as initial conditions. Default is initialization with LTE.
!
! ATOM_BACK (OPTIONAL. DEFAULT=NONE): String URL
!   File with the atomic data for background opacities. Several
!   entries with the same keyword are additive, that is, all the atoms
!   with this keyword will be taken into account to compute background
!   quantities. The code always includes hydrogen in its calculations
!   and it is not necessary to specify an atomic model (there is one
!   hardcoded), although it is possible to do. The path to a
!   population file can be specified to set them. Default is LTE. The
!   same atom cannot be in both ATOM_INPUT and ATOM_BACK lists.
!
! MOLECULE_INPUT (OPTIONAL. DEFAULT=NONE): String URL
!   File with the molecular data for chemical equilibrium and some
!   background opacities. Several entries with the same keyword are
!   additive, that is, all the molecules with the same keyword will be
!   included in the chemical equilibrium (only some of them are taken
!   into account for background opacities: OH, CH, and H2).
!
!#####################################################################

 ATOM_INPUT = Atoms/CaII/CaII_5L_IRTCRD_sparse.atom
 
 ATOM_BACK = Atoms/Background/He_nobb.atom
 ATOM_BACK = Atoms/Background/C_nobb.atom
 ATOM_BACK = Atoms/Background/N_nobb.atom
 ATOM_BACK = Atoms/Background/O_nobb.atom
 ATOM_BACK = Atoms/Background/Na_nobb.atom
 ATOM_BACK = Atoms/Background/Al_nobb.atom
 ATOM_BACK = Atoms/Background/Si_nobb.atom
 ATOM_BACK = Atoms/Background/S_nobb.atom
!ATOM_BACK = Atoms/Background/Ca_nobb.atom
 ATOM_BACK = Atoms/Background/Fe_nobb.atom
 ATOM_BACK = Atoms/Background/Ni_nobb.atom
 ATOM_BACK = Atoms/Background/Mg_nobb.atom

 MOLECULE_INPUT  = Molecules/C2.molecule
 MOLECULE_INPUT  = Molecules/CH.molecule
 MOLECULE_INPUT  = Molecules/CN.molecule
 MOLECULE_INPUT  = Molecules/CO.molecule
 MOLECULE_INPUT  = Molecules/H2.molecule
 MOLECULE_INPUT  = Molecules/H2+.molecule
 MOLECULE_INPUT  = Molecules/H2O.molecule
 MOLECULE_INPUT  = Molecules/N2.molecule
 MOLECULE_INPUT  = Molecules/NH.molecule
 MOLECULE_INPUT  = Molecules/NO.molecule
 MOLECULE_INPUT  = Molecules/O2.molecule
 MOLECULE_INPUT  = Molecules/OH.molecule

!#####################################################################
!
! OUTPUT 
! OUT_FOLDER (OPTIONAL. DEFAULT=Outputs/Default) String URL
!   Folder to store the output files. Allows for path relative to the
!   current path at the time of execution.
!
!#####################################################################

 OUT_FOLDER = {jobpath}

!#####################################################################
!
! ATMOSPHERE
!
! ATMO_INPUT (REQUIRED): String URL
!   File with the atmospheric data. Allows for path relative to the
!   current path at the time of execution.
!
! BFIELD_INPUT (OPTIONAL. DEFAULT=NONE): String URL
!   File with the magnetic field data. Allows for path relative to
!   the current path at the time of execution.
!
! OPACITY_FUDGE (OPTIONAL. DEFAULT=NONE): String URL
!   File with data for background opacity fudge. Allows for path
!   relative to the current path at the time of execution.
!
!#####################################################################

 ATMO_INPUT = {jobpath}/muram.atmos

 BFIELD_INPUT = {jobpath}/muram.field

 OPACITY_FUDGE = Resources/fudge.dat

!#####################################################################
!
! ATOM PARAMETER
!
! STIM: CHARACTER(YES/NO. DEFAULT=NO)
!   Stimulated emission taken into account.
!
! P_CORR: (OPTIONAL. DEFAULT=YES): CHARACTER(YES/NO)
!   Corrects the rho00 when going from multi-level to multi-term.
!
! K_CUT: (OPTIONAL. DEFAULT=NONE): CHARACTER(NONE)/INTEGER(>0)
!   Maximum K multipole that will be taken into account in rhoKQ. None
!   means no limit.
!
! K_RAD: (OPTIONAL. DEFAULT=NONE): CHARACTER(NONE)/INTEGER(>0)
!   Maximum K multipole that will be taken into account in JKQ. None
!   means no limit.
!
!#####################################################################

 STIM = Yes

 P_CORR = Yes

 K_CUT = 2

 K_RAD = None

!#####################################################################
!
! GEOMETRIC QUADRATURE
!
! POLAR_NODES (OPTIONAL. DEFAULT=4): INTEGER
!   Number of nodes for the directions in the polar angle, for each 
!   hemisphere.
!
! AXIAL_NODES (OPTIONAL. DEFAULT=2: INTEGER
!   Number of nodes for the direction in the azimuthal direction, for
!   each quadrant. -1 forces axial symmetry if appropriate.
!   By RCE: -1 is appropriate when there is no magnetic field or
!   velocity gradients.
!#####################################################################

 POLAR_NODES = 4

 AXIAL_NODES = 2

!#####################################################################
!
! LINE OF SIGHT
!
! POLAR_LOS_N (OPTIONAL. DEFAULT=1): INTEGER
!   Number of LOS polar angles.
!
! POLAR_LOS (OPTIONAL if no POLAR_LOS_N. DEFAULT=0.1):
! REAL(POLAR_LOS_N)
!   LOS polar angles.
!
! AXIAL_LOS_N (OPTIONAL. DEFAULT=1): INTEGER
!   Number of LOS azimuthal angles.
!
! AXIAL_LOS (OPTIONAL if no AXIAL_LOS_N. DEFAULT=0.0):
! REAL(AXIAL_LOS_N)
!   LOS azimuthal angles.
!
!#####################################################################

 POLAR_LOS_N = 5

 POLAR_LOS = 0.1 0.5 0.6 0.9 1.0

 AXIAL_LOS_N = 1

 AXIAL_LOS = 0.0

!#####################################################################
!
! NG ACCELERATION
!

! En esta versión del codigo he introducido aceleración NG. En muchos
! problemas esto puede reducir considerablemente el número de iteraciones.
! En el test que he hecho ahora con 20G he pasado de 29 minutos
! (sin corte en K ni NG) a 4 minutos (con K_CUT=2 y con NG).

! La primera simplemente dice que la aceleración ha de aplicarse.
! La segunda es el orden de la aceleración, es decir, cuántos pasos da
! antes de extrapolar el resultado. La última dice cuántas iteraciones
! tienen que hacerse antes de empezar a aplicar la aceleración.
! Esto último se pone porque esta aceleración es puramente matemática,
! es decir, se estudia la tendencia que van siguiendo los rhoes y se
! extrapola a dónde parece que van a llegar. Aunque parezca increíble,
! suele funcionar. 3 y 20 son parámetros estándar, pero el 20 es bastante
! arbitrario, a veces no es suficiente. También puede pasar que no sea
! bueno activarla, y que en realidad vaya a tardar más (se puede intuir
! muchas veces en el output que el código va dando, pues se ve que cada
! vez que intenta acelerar la mejora es menor de lo que sería sin
! aceleración). Pero parece que para tu problema (al menos con 20G)
! funcionó más que bien.
!
!#####################################################################

 NG_ACC = Yes
 NG_ord = 3
 NG_delay = 20
 
!#####################################################################
!
! SOLUTION
!
! MODE (OPTIONAL. DEFAULT=SOLVE): CHARACTER (READ/SOLVE/BOTH)
!   Mode of operation:
!     READ: Reads a previous solution and just does the emergence.
!    SOLVE: Does the RT and the emergence.
!     BOTH: Reads a previous solution and does both RT and emergence.
!
! FORCE (OPTIONAL. DEFAULT=NONE): CHARACTER (INTENSITY/POLARIZATION/
!                                            ALL/NONE)
!   Defines the flow of the code:
!    INTENSITY: Only computes intensity.
! POLARIZATION: Skips the intensity initialization.
!          ALL: Forces the output of both intensity and polarization.
!         NONE: Normal and intended flow of the code.
!
! SOLUTION_INPUT (OPTIONAL. DEFAULT=OUTPUT_FOLDER/Solution): String URL
!   Path to a solution file (generated in a previous execution) for
!   the same problem that is being solved. Allows for path relative to
!   the current path at the time of execution.
!
! SOLUTION_BACKUP (OPTIONAL. DEFAULT=NO): (YES/NO) CHARACTER
!   If yes and OUTPUT_FOLDER/Solution exists, it backups the solution
!   file (mv Solution Solution_X, with X the lowest positive integer
!   for which the Solution_X file is not present in OUTPUT_FOLDER)
!
!#####################################################################

 MODE = BOTH

 FORCE = NONE

 SOLUTION_INPUT = Solution
 SOLUTION_BACKUP = Yes

!#####################################################################
!
! REDISTRIBUTION
!
! ITER_2ORD (OPTIONAL. DEFAULT=NO): CHARACTER (YES/NO)
!   Partial redistribution (PRD):
!    YES: Takes into account PRD if in the model atoms.
!     NO: Forces complete redistribution (CRD).
!
! RAMAN (OPTIONAL. DEFAULT=YES): CHARACTER(YES/NO)
!   Specifies if we should take into account scattering events where
!   the initial term is different from the final term.
!
! RED_MOD (OPTIONAL. DEFAULT=AA): CHARACTER (AA/AD)
!   Mode of redistribution functions:
!     AA: Angle averaged (it is a numerical average over the chosen
!         quadrature for the radiation transfer
!     AD: Angle dependent (takes into account the dependence of the
!         redistribution function on the scattering angle)
!
! RED_NODE (OPTIONAL. DEFAULT=4): INTEGER
!   Number of quadrature nodes per hemisphere for the integration of
!   the angle-average redistribution function.
!
! RED_RESO (OPTIONAL. DEFAULT=3.5): REAL
!   Distance (in Doppler widths) to a transition to consider that you
!   are in a transition resonance situation when defining the input
!   frequency axis
!
! RED_NEGL (OPTIONAL. DEFAULT=10000): REAL
!   Distance (in Doppler widths) to a transition of the output 
!   frequency to consider that the contribution of this line is
!   negligible
!
! RED_CORE (OPTIONAL. DEFAULT=0): REAL
!   Distance (in Doppler widths) to a transition of the output 
!   frequency to consider it to be in the core region
!
! RED_RANG (OPTIONAL. DEFAULT=3.5): REAL
!   Distance (in Doppler widths) to consider a frequency close to a
!   resonance when building the input frequency axis
!
! RED_RANG_CORE (OPTIONAL. DEFAULT=RED_RANG): REAL
!   Distance (in Doppler widths) to consider a frequency close to a
!   resonance when building the input frequency axis, for the core
!   region
!
! RED_VLAR (OPTIONAL. DEFAULT=7): REAL
!   Distance (in Doppler widths) to any resonance to start ignoring
!   input frequencies
!
! RED_VLAR_CORE (OPTIONAL. DEFAULT=RED_VLAR): REAL
!   Distance (in Doppler widths) to any resonance to start ignoring
!   input frequencies, for the core region
!
! RED_FSTP (OPTIONAL. DEFAULT=0.5): REAL
!   Step (in Doppler widths) in the input frequency axis around the
!   resonance
!
! RED_FSTP_CORE (OPTIONAL. DEFAULT=RED_FSTP): REAL
!   Step (in Doppler widths) in the input frequency axis around the
!   resonance, for the core region
!
! RED_MSTP (OPTIONAL. DEFAULT=4): REAL
!   Multiplicative factor for the step when you are out of the 
!   RED_RANG range, but inside RED_VLAR
!
! RED_MSTP_CORE (OPTIONAL. DEFAULT=RED_MSTP): REAL
!   Multiplicative factor for the step when you are out of the 
!   RED_RANG_CORE range, but inside RED_VLAR_CORE, for the core region
!
! NO_COH_L_TERM (OPTIONAL. DEFAULT=NO): String YES/NO
!   If YES, omit the non-coherent lower term.  This only impacts the 
!   second order emissivity.  It also reduces the dimensions of the 
!   redistribution array.
!
!#####################################################################

 ITER_2ORD = YES

 RAMAN = YES

 RED_MOD = AA

 RED_NODE = 4

 RED_RESO = 3.5
 RED_NEGL = 10000
 RED_CORE = 2.5
 RED_RANG = 3.5
 RED_RANG_CORE = 3.5
 RED_VLAR = 7
 RED_VLAR_CORE = 7
 RED_FSTP = 0.5
 RED_FSTP_CORE = 0.25
 RED_MSTP = 4
 RED_MSTP_CORE = 8

 NO_COH_L_TERM = YES

!#####################################################################
!
! RAM
!
! VOI_IRAM (OPTIONAL. DEFAULT=YES): CHARACTER(YES/NO)
!   Specifies if the Voigt profiles in the intensity problem and the
!   frequency quantities in the emissivity of the photoionizations
!   are pre-computed and stored in RAM.
!
! VOI_PRAM (OPTIONAL. DEFAULT=NO): CHARACTER(YES/NO)
!   Specifies if the Voigt profiles in the polarization problem are
!   pre-computed and stored in RAM.
!
! RED_IRAM (OPTIONAL. DEFAULT=YES): CHARACTER(YES/NO)
!   Specifies if the redistribution function is stores in RAM for the
!   intensity part of the code.
!
! RED_PRAM (OPTIONAL. DEFAULT=NO): CHARACTER(YES/NO)
!   Specifies if the redistribution function is stores in RAM for the
!   polarization part of the code.
!   !!!!!WARNING!!!!! THIS OPTION CAN MAKE YOUR COMPUTER RUN OUT OF
!   MEMORY DEPENDING ON THE ATOM AND RAM_LIM.
!
! RAM_LIM (OPTIONAL. DEFAULT=NONE): CHARACTER(NONE) or INTEGER
!   Limit in MB per CPU that can be used to allocate RAM to be used
!   to store Voigt profiles and redistribution functions.
!   NOTE: It ONLY limits the RAM used in these SPECIFIC variables.
!
!#####################################################################

 VOI_IRAM = YES

 VOI_PRAM = YES

 RED_IRAM = YES

 RED_PRAM = YES

 RAM_LIM = NONE

!#####################################################################
!
! DEFAULT DOPPLER WIDTH
!
! DOP_WIDTH (OPTIONAL. DEFAULT=2.5E3) CHARACTER[MIN/MAX] or REAL
!   Doppler width (m/s) to convert from normalized to real wavelength.
!     If min or max, the minimum or the maximum of the Doppler width is 
!     used.
!     If a float, that number is used.
!
!#####################################################################

 DOP_WIDTH = 2500

!#####################################################################
!
! CONVERGENCE
!
! ITER_J (OPTIONAL. DEFAULT=5): INTEGER
!   Number of iterations of only the radiation field, without atoms.
!
! ITER_MIN (OPTIONAL. DEFAULT=1): INTEGER
!   Number of the first iteration (usefull to restart calculations
!   without overwritting partial result files).
!
! ITER_MAX (OPTIONAL. DEFAULT=500): INTEGER
!   Maximum number of iterations.
!
! ITERI_MIN (OPTIONAL. DEFAULT=1): INTEGER
!   Number of the first iteration for the intensity part of the code.
!
! ITERI_MAX (OPTIONAL. DEFAULT=ITER_MAX): INTEGER
!   Maximum number of iterations for the intensity part of the code.
!
! ITER_PRD (OPTIONAL. DEFAULT=4): INTEGER
!   Number of iterations of the radiation field, without going
!   solving SEE, when in PRD, only for the intensity part of the code.
!
! ITERI_MRC_I (OPTIONAL. DEFAULT=ITER_MRC_I): REAL
!   Maximum relative change that we want to reach for rho^0_0 in the
!   intensity part of the code.
!
! ITERI_MRC_R (OPTIONAL. DEFAULT=1e-3): REAL
!   Maximum relative change that we want to reach for the J^0_0 in
!   the PRD iterations (no SEE).
!
! ITER_MRC_I (OPTIONAL. DEFAULT=1e-3): REAL
!   Maximum relative change that we want to reach for rho^0_0.
!
! ITER_MRC_P (OPTIONAL. DEFAULT=1e-3): REAL
!   Maximum relative change that we want to reach for rho^K_Q.
!
! APPENDI_MRC (OPTIONAL. DEFAULT=NO): CHARACTER (Y/N)
!   If yes, the MRCI file will not be overwritten, but appended.
!
! APPEND_MRC (OPTIONAL. DEFAULT=NO): CHARACTER (Y/N)
!   If yes, the MRC file will not be overwritten, but appended.
!
!#####################################################################

 ITER_J = 15

 ITER_MIN = 1
 ITER_MAX = 2000

 ITER_PRD = 4
 ITERI_MRC_I = 1.0d-3
 ITERI_MRC_R = 1.0d-3

 ITER_MRC_I = 1.0d-3
 ITER_MRC_P = 1.0d-3

 APPEND_MRC = No

!#####################################################################
!
! SAVING
!
! STORE_STEP (OPTIONAL. DEFAULT=NONE): INTEGER(>0).
!   Number of steps to do before saving partial results (something
!   different than a natural does not save).
!
! STOREI_STEP (OPTIONAL. DEFAULT=NONE): INTEGER(>0).
!   Number of CRD steps to do before saving partial results in the
!   intensity part of the code (something different than a natural
!   does not save).
!
! CONTRIBUTION (OPTIONAL. DEFAULT=NO): CHARACTER (Y/N)
!   Yes or No to calculate and output the contribution function.
!
! TAU1 (OPTIONAL. DEFAULT=NO): CHARACTER (Y/N)
!   Yes or No to calculate and output the height of tau=1.
!
!#####################################################################

 STORE_STEP = None
 STOREI_STEP = None

 CONTRIBUTION = N

 TAU1 = N

!#####################################################################
!
! VERBOSE
!
! VERBOSE (OPTIONAL. DEFAULT=NO): String Yes/No
!   If yes, output will go to the terminal window.
!   If not, it will go to the verbose file
!
!#####################################################################

 VERBOSE = Yes

!#####################################################################
!
! DOMAIN DECOMPOSITION
!
! MPI_ND (OPTIONAL. DEFAULT=1): INTEGER
!   Number of domains to split the heights. The number of processors
!   minus one should be divisible by this number. The number of nodes
!   in the atmosphere should be at least three times this number.
!
!#####################################################################

 MPI_ND = 1

